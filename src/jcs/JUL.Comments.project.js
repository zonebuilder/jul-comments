/*
	JUL Comment System (JCS) version 1.2.5
	Copyright (c) 2015 - 2016 The Zonebuilder (zone.builder@gmx.com)
	http://sourceforge.net/projects/jul-comments/
	Licenses: GNU GPLv2 or later; GNU LGPLv3 or later (http://sourceforge.net/p/jul-comments/wiki/License/)
*/
/**
	@fileOverview	Thid file configures the application and project operations
*/
/* jshint browser: true, curly: true, eqeqeq: true, expr: true, funcscope: true, immed: true, latedef: true, loopfunc: true,  
	onevar: true, newcap: true, noarg: true, node: true, strict: true, trailing: true, undef: true, unused: vars, wsh: true */
/* globals ample, JUL */

(function() {
'use strict';

/* generated by JCS version 1.2.5 */

/**
	Project operations module
	@namespace
	@name	JUL.Comments.project
*/
JUL.ns('JUL.Comments.project');

JUL.apply(JUL.Comments.project, /** @lends JUL.Comments.project */ {
	/**
		It stores a parser instance used for generating the code
		@type	Object
	*/
	coder: null,
	/**
		Parser configuration for the coder
		@type	Object
	*/
	coderConfig: {
		_useJsonize: false, _usePrefixes: true
	},
	/**
		Reference to the current project
		@type	Object
	*/
	current: {},
	/**
		It holds the runtime state of the current project
		@type	Object
	*/
	state: {
		/**
			Transformed object tree used for generating the code
			@type	Object
		*/
		jsonObject: null,
		 /**
			Last used file name
			@type	String
		*/
		lastFile: '',
		 /**
			True if the current project isn't saved
			@type	Boolean
		*/
		notSaved: false,
		 /**
			It holds the contents of the internal clipboard
			@type	Object
		*/
		clipboard: {},
		 /**
			Reverse mapping between component IDs and namespace paths
			@type	Object
		*/
		revMap: {}
	},
	/**
		Adds a new field to the comment fields list box
	*/
	addField: function() {
		if (!this.currentNode) { return; }
		var sField = JUL.trim(ample.getElementById('menulist-field').getAttribute('value'));
		if (!sField) { return; }
		var oList = ample.getElementById('listbox-comment');
		var oItem = {field: sField};
		var sId = this.app.newId('listitem-');
		this.parser.create({tag: 'listitem', id: sId, children: [
			{tag: 'listcell', label: sField},
			{tag: 'listcell', children: [this.app.buildField(oItem.field, oItem)]}
		]}, null, oList.body);
		this.app.state.map[sId] = oItem;
		this.onFieldChange();
	},
	/**
		Applies the edited comment fields over the project code
	*/
	applyComment: function() {
		if (!this.currentNode) { return; }
		delete this.state.lastChanged;
		var aFields = [];
		var oList = ample.getElementById('listbox-comment');
		for (var i = 0; i < oList.items.length; i++) {
			aFields[i] = JUL.apply({}, this.app.getWhere(oList.items[i]));
		}
		var sPath = this.app.getWhere(this.currentNode);
		if (aFields.length) { this.current.comments[sPath] = aFields; }
		else { delete this.current.comments[sPath]; }
		this.setPreview(sPath);
		sPath = this.getFile(sPath);
		this.fillCode(sPath, true);
		this.selectTab(sPath);
		this.notSaved();
	},
	/**
		Builds a (sub)tree in the DOM tree pane
		@param	{String}	[sPath]	The namespace path to render, defaults to project's found object path
		@param	{Number}	[nLevel]	Maximum number of levels to render
	*/
	buildTree: function(sPath, nLevel) {
		var aShow = [].concat(this.current.showPaths || []);
		for (var u = 0; u < aShow.length; u++) {
			if (this.inside(aShow[u], sPath) || this.inside(sPath, aShow[u],true)) { break; }
		}
		if (u >= aShow.length && this.current.levels && nLevel > this.current.levels) { return; }
		var sId = sPath.replace(/\\\./g, ':::::').split('.');
		var sLabel = sId.pop().replace(/:{5}/g, '.');
		sId = this.getId(sId.join('.').replace(/:{5}/g, '\\.') , 'node-');
		var oNode = ample.getElementById(sId);
		if (oNode) {
			oNode.setAttribute('container', true);
			oNode.setAttribute('open', true);
		}
		else {
			oNode = ample.getElementById('tree-dom').body;
			sLabel = sPath;
		}
		sId = this.getId(sPath, 'node-');
		if (ample.getElementById(sId)) { return; }
		if (!oNode.children) {
			if (oNode.nodeName === 'xul:treeitem') { oNode.parentNode.reflow(); }
			this.parser.createComponent({tag: 'treechildren', parent: oNode});
		}
		var oConfig =  {
			tag: 'treeitem',
			id: sId,
			children: [
				{tag: 'treerow', children: [
					{tag: 'treecell', label: sLabel}
				]}
			]
		};
		this.parser.create(oConfig, null, oNode.children);
		if (sPath.substr(-14) === '.@fileOverview' && oNode.children.items.length > 1) {
			var oLast = oNode.children.removeChild(oNode.children.lastChild);
			oNode.children.insertBefore(oLast, oNode.children.firstChild);
		}
		this.app.state.map[sId] = sPath;
	},
	/**
		Verifies the save state of the current project
	*/
	checkSave: function() {
		if (this.state.notSaved && this.state.jsonObject && window.confirm('Project not saved. Do you want to save it now?')) {
			this.save('save');
		}
	},
	copyField: function(bCut) {
		if (!this.currentNode) { return; }
		var oList = ample.getElementById('listbox-comment');
		if (!oList.selectedItems.length) {
			window.alert('Please select some items');
			return;
		}
		this.state.clipboard.fields = [];
		for (var i = 0; i < oList.selectedItems.length; i++) {
			var oItem = oList.selectedItems[i];
			var oField = JUL.apply({}, this.app.getWhere(oItem));
			this.state.clipboard.fields.push(oField);
		}
		if (bCut) { this.removeField(); }
	},
	/**
		Transorms the given code into a commented one. It acts as a callback in JUL.UI.obj2str().
		@param	{String}	sContent	Input code
		@param	{String}	sPath	Member's namespace relative to the root object
		@param	{String}	sIndent	Current indentation string
		@returns	{String}	Transformed code
	*/
	decorator: function(sContent, sPath, sIndent) {
		if (!sPath) { return sContent; }
		var oProject = JUL.Comments.project;
		sPath = oProject.state._rootPath + (sPath ? '.' + sPath : '');
		var aComments = oProject.current.comments[sPath];
		if (aComments) {
			sContent = oProject.app.replace(sContent, aComments); 
			sContent = JUL.Comments.getComment(aComments).replace(/\n\r?/g, oProject.coder._newlineString + sIndent) + sContent;
		}
		return sContent;
	},
	/**
		Empties a list box in the interface
		@param	{String}	[sId]	Element ID, defaults to the ID of the comment fields list box
	*/
	emptyList: function(sId) {
	if (!sId) { sId = 'listbox-comment'; }
		var oList = typeof sId === 'string' ? ample.getElementById(sId) : sId;
	while (oList.body.lastChild) { oList.body.removeChild(oList.body.lastChild); }
	},
	/**
		Removes all tabs ftom the code tab box
	*/
	emptyTabs: function() {
		var oTabs = ample.getElementById('tabs-code');
		while (oTabs.lastChild) {
			var sId = oTabs.lastChild.getAttribute('id');
			var sPath = this.app.getWhere(sId);
			oTabs.removeChild(oTabs.lastChild);
			delete this.app.state.map[sId];
			delete this.state.revMap['tab-' + sPath];
		}
	},
	/**
		Displays the code for a code tab
		@param	{String}	sPath	Tab's namespace path
		@param	{Boolean}	[bUpdate]	True to force update the code tab
	*/
	fillCode: function(sPath, bUpdate) {
				if (bUpdate || this.state.lastFile !== sPath) {
				ample.getElementById('textbox-code').setAttribute('value', this.getCode(sPath));
				this.state.lastFile = sPath;
			}
	},
	/**
		Fills the comment fields list box
		@param	{Array}	aComment	Array of field items
	*/
	fillComment: function(aComment) {
		var oList = ample.getElementById('listbox-comment');
		for (var i = 0; i < aComment.length; i++) {
			var oConfig = this.app.config.fieldTypes.hasOwnProperty(aComment[i].field) ? this.app.config.fieldTypes[aComment[i].field] : this.app.config.otherField;
			var oItem = JUL.apply({}, aComment[i]);
			var sId = this.app.newId('listitem-');
			this.parser.create({tag: 'listitem', id: sId, children: [
				{tag: 'listcell', css: 'label-field', label: aComment[i].field, tooltiptext: oConfig.desc},
				{tag: 'listcell', children: [this.app.buildField(oItem.field, oItem)]}
			]}, null, oList.body);
			this.app.state.map[sId] = oItem;
		}
	},
	/**
		Adds the tabs corresponding to project's files
	*/
	fillTabs: function() {
		var aTabs = [];
		for (var sItem in this.current.files) {
			if (this.current.files.hasOwnProperty(sItem) && this.inside(sItem)) { aTabs.push(sItem); }
		}
		aTabs.sort();
		var oTabs = ample.getElementById('tabs-code');
		for (var i = 0; i < aTabs.length; i++) {
			sItem = aTabs[i];
			var sId = this.getId(sItem, 'tab-');
			this.parser.createComponent({tag: 'tab', id: sId, label: sItem, parent: oTabs});
			this.app.state.map[sId] = sItem;
		}
	},
	/**
		Retrieves an object specified by a namespace path
		@param	{String}	sGet	Namespace path
	*/
	findObject: function(sGet) {
		var oGet;
		try {
			 oGet = this.ref(sGet);
		}
		catch (e) {
			window.alert('Cannot access the object. Is the site in the same domain as JCS?');
			return;
		}
		if (typeof oGet === 'undefined') {
			window.alert('Object not found');
			return;
		}
		this.current.path = sGet;
		this.removeTree();
		this.emptyTabs();
		ample.getElementById('textbox-code').setAttribute('value', '');
		if (!this.current.ns) {
			this.onNewProject(JUL.apply({ns: sGet}, this.current));
			return;
		}
		ample.getElementById('button-file-remove').setAttribute('disabled', true);
		if (!this.current.files[sGet]) {
			this.current.files[sGet] = {
				putOutside: [],
				useJul: this.current.useJul,
				jslint: this.current.jslint,
				template: this.app.config.fileFields.template.init
			};
		}
		if (typeof oGet === 'function' && this.current.expandProto.indexOf(sGet) < 0) { this.current.expandProto.push(sGet); }
		this.state.jsonObject = this.parse(oGet, sGet, this.buildTree);
		this.fillTabs();
		this.fillCode(sGet);
		this.selectTab(sGet);
		if (this.state.afterOpen) { this.save('saveCode'); }
		else { this.notSaved(); }
		delete this.state.afterOpen;
	},
	/**
		Fills the comment list box with the fields corresponding to the selected block comment
	*/
	generateComment: function() {
		if (!this.currentNode) { return; }
		var sWhat = JUL.trim(ample.getElementById('menulist-generate').getAttribute('value'));
		if (!sWhat) { return; }
		var sPath = this.app.getWhere(this.currentNode);
		var oGet = this.ref(sPath);
		var aComment = this.app.generateComment(sWhat, oGet, this.getFields());
		if (aComment.length) {
			var sProp = sPath.replace(/\\\./g, ':::::').split('.').pop();
			if (sProp.substr(0, 1) === '_') { aComment.push({field: 'private'}); }
		}
		this.emptyList();
		this.fillComment(aComment);
		this.onFieldChange();
	},
	/**
		Returns a member of the cahed JSON object
		@param	{String}	sPath	Namespace path
		@returns	{Mixed}	Cached member
	*/
	get: function(sPath) {
		sPath = sPath.substr(this.current.path.length + 1);
		if (sPath) { return JUL.get(sPath, this.state.jsonObject); }
		else { return this.state.jsonObject; }
	},
	/**
		Gets the code for an object corresponding to a project file
		@param	{String}	sPath	Namespace path
		@returns	{String}	JavaScript code
	*/
	getCode: function(sPath) {
		var fName = function(sName) {
			var aName = sName.replace(/\\\./g, ':::::').split('.');
			sName = aName.shift();
			if (aName.length) {
				aName = aName.map(function(sItem) {
					sItem = sItem.replace(/:{5}/g, '.');
					if (JUL.UI._regExps.variable.test(sItem)) { return '.' + sItem; }
					else if (JUL.UI._regExps.uint.test(sItem)) { return '[' + sItem + ']'; }
					else { return "['" + sItem.replace(/'/g, "\\'") + "']"; }
				});
				return sName + aName.join('');
			}
			return sName;
		};
		var aExclude = [];
		for (var sItem in this.current.files) {
			if (this.current.files.hasOwnProperty(sItem) && this.inside(sItem, sPath, true)) { aExclude.push(sItem); }
		}
		var oData = null;
		var sText = '/* generated by ' + this.app.title + ' version ' + this.app.version + ' */' + this.coder._newlineString;
		var i, j, sProto;
		var bJul = this.current.files[sPath].useJul;
		var aPut = (this.current.files[sPath].putOutside || []).map(function(sItem) { return sPath + '.' + sItem;});
		this.state._rootPath = sPath;
		sText = sText + this.coder._newlineString + this.app.getComment((this.current.comments[this.state._rootPath] || []).concat(bJul ? {field: 'name', value: fName(sPath)} : []) );
		var bWrap = bJul && JUL.typeOf(this.ref(sPath)) === 'Object';
		var sText1 = (bWrap ? this.coder._newlineString + 'JUL.apply(' : '') + fName(sPath) + (bWrap ? ', /** @lends ' + fName(sPath) + ' */ ' : ' = ');
		oData = this.parse(this.get(sPath), sPath, null, null, aExclude.concat(aPut));
		sText1 = sText1 + this.coder.obj2str(oData, false, this.decorator) + (bWrap ? ');' :';') + this.coder._newlineString;
		if (bJul) { sText = sText + "JUL.ns('" + sPath.replace(/'/g, "\\'") + "');" + this.coder._newlineString; }
		for (j = 0; j < this.current.expandProto.length; j++) {
			sProto = this.current.expandProto[j];
			if (this.inside(sProto, sPath) && aExclude.concat(aPut).indexOf(sProto) < 0) {
				this.state._rootPath = sProto + '.prototype';
				sText = sText + this.coder._newlineString + this.app.getComment(this.current.comments[this.state._rootPath] || []);
				sText1 = sText1 + (bJul ? this.coder._newlineString + 'JUL.apply(' : '') + fName(sProto) + '.prototype' +
					(bJul ? ', /** @lends ' + fName(this.state._rootPath) + ' */ ' : ' = ');
				oData = this.parse(this.get(this.state._rootPath), this.state._rootPath, null, null, aExclude.concat(aPut));
				sText1 = sText1 + this.coder.obj2str(oData, false, this.decorator) + (bJul ? ');' : ';') + this.coder._newlineString;
			}
		}
		var sText2 = '';
		for (i = 0; i < aPut.length; i++) {
			this.state._rootPath = aPut[i];
			if (aExclude.indexOf(this.state._rootPath) > -1) { continue; }
			var oPut = this.get(this.state._rootPath);
			if (typeof oPut === 'undefined') { continue; }
			sText2 = sText2 + this.coder._newlineString + this.app.getComment(this.current.comments[this.state._rootPath] || []);
			sText2 = sText2 + fName(aPut[i]) + ' = ';
			oData = this.parse(oPut, this.state._rootPath, null, null, aExclude);
			sText2 = sText2 + this.coder.obj2str(oData , false, this.decorator) + ';' + this.coder._newlineString;
			for (j = 0; j < this.current.expandProto.length; j++) {
				sProto = this.current.expandProto[j];
				if (this.inside(sProto, aPut[i]) && aExclude.indexOf(sProto) < 0) {
					this.state._rootPath = sProto + '.prototype';
					sText2 = sText2 + this.coder._newlineString + this.app.getComment(this.current.comments[this.state._rootPath] || []);
					sText2 = sText2 + (bJul ? this.coder._newlineString + 'JUL.apply(' : '') + fName(sProto) + '.prototype'  +
						(bJul ? ', /** @lends ' + fName(this.state._rootPath) + ' */ ' : ' = ');
					oData = this.parse(this.get(this.state._rootPath), this.state._rootPath, null, null, aExclude);
					sText2 = sText2 + this.coder.obj2str(oData, false, this.decorator) + (bJul ? ');' : ';') + this.coder._newlineString;
				}
			}
		}
		var oFile = this.current.files[sPath];
		var sTemplate = oFile.template.replace(/\t/g, this.coder._tabString).replace(/\n\r?/g, this.coder._newlineString);
		var sJslint = oFile.jslint.replace(/\t/g, this.coder._tabString).replace(/\n\r?/g, this.coder._newlineString);
		var sCopyright = this.current.copyright.replace(/\t/g, this.coder._tabString).replace(/\n\r?/g, this.coder._newlineString);
		return this.app.template(sTemplate, {
			code: sText + (bJul ? sText2 + sText1 : sText1 + sText2),
			copyright: sCopyright,
			jslint: sJslint,
			fileOverview: this.app.getComment(this.current.comments[sPath + '.@fileOverview'] || [])
		});
	},
	/**
		Gathers the rows of the comment list box into an array of fields
		@returns	{Array}	Comment fields array
	*/
	getFields: function() {
		var oList = ample.getElementById('listbox-comment');
		var aFields = [];
		for (var l = 0; l < oList.items.length; l++) {
			aFields[l] = this.app.getWhere(oList.items[l]);
		}
		return aFields;
	},
	/**
		Gets the closest project file that includes a given path
		@param	{String}	sPath	Namespace path to search for
		@returns	{String}	File namespace
	*/
	getFile: function(sPath) {
				var aFiles = [];
			for (var sItem in this.current.files) {
				if (this.current.files.hasOwnProperty(sItem) && this.inside(sPath, sItem)) { aFiles.push(sItem); }
			}
			aFiles.sort();
			return aFiles.pop();
	},
	/**
		Translates a namespace into an element ID
		@param	{String}	sPath	Namespace path
		@param	{String}	[sPrefix]	ID prefix
		@returns	{String}	Element ID
	*/
	getId: function(sPath, sPrefix) {
		if (!sPrefix) { sPrefix = ''; }
		if (this.state.revMap[sPrefix + sPath]) {
			return this.state.revMap[sPrefix + sPath];
		}
		else {
			var sId = this.app.newId(sPrefix);
			this.state.revMap[sPrefix + sPath] = sId;
			return sId;
		}
	},
	/**
		Gets the code for the preview pane
		@param	{String}	sPath	Namespace path
		@returns	{String}	JavaScript code
	*/
	getView: function(sPath) {
		var aFields = this.getFields();
		var sComment = this.app.getComment(aFields);
		if (sPath.substr(-14) === '.@fileOverview') { return sComment; }
		var oGet = this.ref(sPath);
		var sType = JUL.typeOf(oGet);
		var sCode = '';
		var aPath = sPath.replace(/\\./g, ':::::').split('.');
		if (aPath.length > 1) {
			aPath = aPath.map(function(sItem) { return sItem.replace(/:{5}/g, '\\.'); });
			var sEnd = aPath.pop();
			var oParent = this.ref(aPath.join('.'));
			if (JUL.typeOf(oParent) === 'Object') {
				var oKey = {}; oKey[sEnd] = 0;
				sCode = sCode + JUL.trim(JUL.UI.obj2str(oKey).slice(1, -1)).slice(0, -1);
			}
		}
		if (oGet && typeof oGet === 'object' && typeof oGet.toJSON === 'function') {
			sCode = sCode + this.coder.obj2str(oGet.toJSON()) + '\n';
		}
		else {
			switch (sType) {
			case 'Array': sCode = sCode + '[]\n'; break;
			case 'Object': sCode = sCode + '{}\n'; break;
			case 'Boolean':
			case 'Date':
			case 'Function':
			case 'Number':
			case 'RegExp':
			case 'String':
			case 'Undefined':
				sCode = sCode + this.coder.obj2str(oGet) + '\n';
			break;
			default: sCode = sCode + 'null\n';
			}
		}
		return sComment + this.app.replace(sCode, aFields);
	},
	/**
		Checks if a path is inside another one
		@param	{String}	sWhat	Checked path
		@param	{String}	[sPath]	The path that check inside, defaults to the project's object path
		@param	{Boolean}	[bStrict]	True to exclude equality
		@returns	{Boolean}	True if checked path is inside the other, false otherwise
	*/
	inside: function(sWhat, sPath, bStrict) {
		if (!sPath) { sPath = this.current.path; }
		return sPath === sWhat.substr(0, sPath.length) && 
			((sWhat.length > sPath.length && sWhat[sPath.length] === '.') || (!bStrict && sWhat.length === sPath.length));
	},
	/**
		Loads a site into the current project
		@param	{String}	sUrl	Site URL
	*/
	loadSite: function(sUrl) {
		if (sUrl.indexOf('.') > 0 && sUrl.substr(0, 1) !== '/' && sUrl.indexOf('://') < 0) { sUrl = 'http://' + sUrl; }
		this.current.site = sUrl;
		this.switchCurrent();
		this.state.notSaved = true;
	},
	moveField: function(bUp) {
		if (!this.currentNode) { return; }
		var oList = ample.getElementById('listbox-comment');
		if (!oList.selectedItems.length) {
			window.alert('Please select an item');
			return;
		}
		var oNode = oList.currentItem;
		if (bUp && !oNode.previousSibling) { return; }
		if (!bUp && !oNode.nextSibling) { return; }
		var oPreviousNode = bUp ? oNode.previousSibling : oNode;
		var oNextNode = bUp ? oNode : oNode.nextSibling;
		oList.body.removeChild(oNextNode);
		oList.body.insertBefore(oNextNode, oPreviousNode);
		if (bUp) { oList.selectItem(oNextNode); }
		this.onFieldChange();
	},
	/**
		Changes the save state of the project and reflects it in the interface
		@param	{Boolean}	[bSaved]	Save flag
	*/
	notSaved: function(bSaved, bUndo) {
		if (!bUndo) { delete this.state.undoTree; }
		bSaved = bSaved || false;
		this.state.notSaved = !bSaved;
		ample.getElementById('tbutton-save-project').setAttribute('disabled', bSaved);
		ample.getElementById('tbutton-download-code').setAttribute('disabled', !bSaved);
	},
	/**
		Fires on closing the current project
	*/
	onCloseProject: function() {
		this.checkSave();
		this.current = {};
		this.switchCurrent();
	},
	/**
		Fires on deleting the current project
	*/
	onDeleteProject: function() {
		if (!this.current.ns) {
			window.alert('There is no current project');
			return;
		}
		if (!window.confirm('Are you sure to permanently delete \'' + this.current.title + '\' project?')) { return; }
		ample.post('index.php/main/manage', {
			operation: 'delete',
			type: 'project',
			ns: this.current.ns
		}, function(sResponse) {
			sResponse = JSON.parse(sResponse);
			if (sResponse.error) {
				window.alert(sResponse.error);
				return;
			}
			var oProject = JUL.Comments.project;
			oProject.onCloseProject();
		});
	},
	/**
		Fires when the user presses the 'Download code' button
	*/
	onDownloadCode: function() {
		if (!this.current.ns) { return; }
		window.document.getElementById('iframe-site').contentWindow.location = 'index.php/main/manage?type=project&operation=download&ns=' +
			encodeURIComponent(this.current.ns) + '&version=' + encodeURIComponent(this.current.version);
	},
	/**
		Fires on editing the current project
	*/
	onEditProject: function() {
		if (!this.current.ns) {
			window.alert('There is no current project');
			return;
		}
		this.app.open.type = 'editProject';
		this.app.createRows('project', this.current);
		var oDialog = ample.getElementById('dialog-open');
		oDialog.setAttribute('title', 'Edit project - ' + this.current.title);
		oDialog.showModal();
	},
	/**
		Fires when the user checks 'expamd prototype'
		@param	{Boolean}	bCheck	Check state
	*/
	onExpandProto: function(bCheck) {
		if (!this.currentNode) { return; }
		var sPath = this.app.getWhere(this.currentNode);
		var aProto = this.current.expandProto;
		var ix = aProto.indexOf(sPath);
		var bTabs = false;
		if (bCheck) {
			if (ix < 0) { aProto.push(sPath); }
		}
		else {
			if (ix > -1) {
				aProto.splice(ix, 1);
				for (var i = 0; i < aProto.length; i++) {
					if (this.inside(aProto[i], sPath + '.prototype')) {
						this.current.expandProto.splice(i, 1);
						i--;
					}
				}
				for (var sItem in this.current.files) {
					if (this.current.files.hasOwnProperty(sItem) && this.inside(sItem, sPath + '.prototype')) {
						delete this.current.files[sPath];
						bTabs = true;
					}
				}
			}
		}
		this.removeTree(this.currentNode, true);
		var sMember = sPath.substr(this.current.path.length + 1);
		JUL.ns('jsonObject' + (sMember ? '.' + sMember : ''),
			this.parse(this.ref(sPath), sPath, this.buildTree), this.state);
		if (bTabs) {
			this.removeTabs();
			this.fillTabs();
		}
		sPath = this.getFile(sPath);
		this.fillCode(sPath, true);
		this.selectTab(sPath);
		this.notSaved();
	},
	/**
		Fires after a comment field changes
		@param	{Object}	oWhere	JUL.Ref of changed value
		@param	{Object}	oControl	The editing element
	*/
	onFieldChange: function(oWhere, oControl) {
		this.state.lastChanged = {
			path: this.app.getWhere(this.currentNode),
			fields: this.getFields()
		};
		ample.getElementById('button-apply').setAttribute('class', 'apply');
		this.setPreview(false, true);
	},
	/**
		Fires when the users presses the file 'Properties' button
	*/
	onFileProperties: function() {
		if (!this.state.jsonObject) { return; }
		this.app.open.type = 'editFile';
		var sPath = this.app.getWhere(ample.getElementById('tabs-code').parentNode.selectedTab);
		this.app.createRows('file', this.current.files[sPath]);
		var oDialog = ample.getElementById('dialog-open');
		oDialog.setAttribute('title', 'File properties - ' + sPath);
		oDialog.showModal();
	},
	/**
		Fires when the user presses the file 'Remove' button
	*/
	onFileRemove: function() {
		if (!this.state.jsonObject) { return; }
		var sPath = this.app.getWhere(ample.getElementById('tabs-code').parentNode.selectedTab);
		if (sPath === this.current.path) { return; }
			var aPut = this.current.files[sPath].putOutside || [];
			delete this.current.files[sPath];
		this.emptyTabs();
		this.fillTabs();
		this.onSelectNode(this.currentNode);
		var sId = this.getId(sPath, 'node-');
		var oNode = ample.getElementById(sId);
		if (aPut.length) {
			this.removeTree(oNode, true);
			var sMember = sPath.substr(this.current.path.length + 1);
			JUL.ns('jsonObject' + (sMember ? '.' + sMember : ''),
				this.parse(this.ref(sPath), sPath, this.buildTree), this.state);
		}
		else {
			this.removeTree(oNode.children.firstChild);
		}
		this.notSaved();
	},
	/**
		Auto-generates block comments for the selected items
	*/
	onGenerateComments: function() {
		if (!this.current.ns) { return; }
		var oTree = ample.getElementById('tree-dom');
		var oItems = oTree.selectedItems;
		if (!oItems.length) {
			window.alert('No items selected');
			return;
		}
		this.state.undoTree = {
			operation: 'generateComments',
			select: this.currentNode,
			nodes: {}
		};
		var sPath = '';
		for (var i = 0; i < oItems.length; i++) {
			sPath = this.app.getWhere(oItems.item(i));
			this.state.undoTree.nodes[sPath] = this.current.comments[sPath] || false;
			var oGet = this.ref(sPath);
			var sName = sPath.replace(/\\./g, ':::::').split('.').pop().replace(/:{5}/, '.');
			var sWhat = this.app.getCommentType(oGet, sName);
			this.current.comments[sPath] = this.app.generateComment(sWhat, oGet, this.current.comments[sPath]);
			if (sName.substr(0, 1) === '_') { this.current.comments[sPath].push({field: 'private'}); }
		}
		delete this.state.lastChanged;
		sPath = this.getFile(sPath);
		this.fillCode(sPath, true);
		this.selectTab(sPath);
		this.notSaved(false, true);
		this.onSelectNode(this.currentNode);
	},
	/**
		Fires when the user brings up the 'About' window
	*/
	onHelpAbout: function() {
		ample.getElementById('window-about').showModal();
	},
	/**
		Fires when the user brings up the 'Help' window
	*/
	onHelpContents: function() {
		ample.getElementById('window-help').showModal();
	},
	/**
		Fires when creating a new project
		@param	{Object}	[oInit]	Optional initializer
	*/
	onNewProject: function(oInit) {
		this.checkSave();
		this.app.open.type = 'newProject';
		this.app.createRows('project', oInit);
		var oDialog = ample.getElementById('dialog-open');
		oDialog.setAttribute('title', 'New project');
		oDialog.showModal();
	},
	/**
		Performs validation and opens a project
	*/
	onOpen: function() {
		if (this.app.open.type === 'newProject' || this.app.open.type === 'editProject') {
			var sNS = JUL.trim(ample.getElementById(this.app.state.controls.projectFields.ns).getAttribute('value'));
			if (!(/^[$\w\.]+$/).test(sNS)) {
				window.alert("Invalid project namespace. Allowed characters: 'A-Z', 'a-z', '0-9', '_', '.'");
				return;
			}
			var sPath = JUL.trim(ample.getElementById(this.app.state.controls.projectFields.path).getAttribute('value'));
			if (!sPath) {
				window.alert('Default object namespace/path must not be empty');
				return;
			}
		}
		switch (this.app.open.type) {
		case 'newProject': this.save('new'); break;
		case 'editProject': this.save('edit'); break;
		case 'editFile': this.saveFile(); break;
		}
	},
	/**
		Fires on opening a project
	*/
	onOpenProject: function() {
		this.checkSave();
		this.emptyList('listbox-browse');
		ample.get('index.php/main/manage', {
			type: 'project',
			operation: 'browse',
			ts: (new Date()).getTime()
		}, function(oResponse) {
			oResponse = JSON.parse(oResponse);
			if (oResponse.error) {
				window.alert(oResponse.error);
				return;
			}
			var oComments = JUL.Comments;
			var oBody = ample.getElementById('listbox-browse').body;
			for (var i = 0; i < oResponse.result.length; i++) {
				oComments.project.parser.create({
					tag: 'listitem', id: oComments.newId('item-'),
					children: [
						{tag: 'listcell', css: 'label-field', label: oResponse.result[i][0]},
						{tag: 'listcell', css: 'label-field', label: oResponse.result[i][1]}
					]
				}, null, oBody);
				oComments.state.map[oComments.lastId()] = oResponse.result[i][0];
			}
		});
		ample.getElementById('dialog-browse').showModal();
	},
	/**
		Fires when the user changes 'put outside' text box
		@param	{String}	sVal	Edited value
	*/
	onPutOutside: function(sVal) {
		if (!this.currentNode) { return; }
		var sPath = this.app.getWhere(this.currentNode);
		var aVal = sVal ? sVal.split(',').map(JUL.trim) : [];
		var aOld = this.current.files[sPath].putOutside || [];
		if (JSON.stringify(aVal) === JSON.stringify(aOld)) { return; }
		if (sVal) {
			this.current.files[sPath].putOutside = aVal;
		}
		else {
			delete this.current.files[sPath].putOutside;
		}
		this.removeTree(this.currentNode, true);
		var sMember = sPath.substr(this.current.path.length + 1);
		JUL.ns('jsonObject' + (sMember ? '.' + sMember : ''),
			this.parse(this.ref(sPath), sPath, this.buildTree), this.state);
		this.fillCode(sPath, true);
		this.selectTab(sPath);
		this.notSaved();
	},
	onRemoveComments: function() {
		if (!this.current.ns) { return; }
		var oTree = ample.getElementById('tree-dom');
		var oItems = oTree.selectedItems;
		if (!oItems.length) {
			window.alert('No items selected');
			return;
		}
		this.state.undoTree = {
			operation: 'removeComments',
			select: this.currentNode,
			nodes: {}
		};
		var sPath = '';
		for (var i = 0; i < oItems.length; i++) {
			sPath = this.app.getWhere(oItems.item(i));
			this.state.undoTree.nodes[sPath] = this.current.comments[sPath] || false;
			delete this.current.comments[sPath];
		}
		delete this.state.lastChanged;
		sPath = this.getFile(sPath);
		this.fillCode(sPath, true);
		this.selectTab(sPath);
		this.notSaved(false, true);
		this.onSelectNode(this.currentNode);
	},
	/**
		Fires on saving the current project
	*/
	onSaveProject: function() {
		this.save('save');
	},
	/**
		Fires when selecting a node in the DOM tree pane
		@param	{Object}	oNode	Selected node
	*/
	onSelectNode: function(oNode) {
		this.currentNode = oNode;
		this.emptyList();
		if (oNode) {
			var sPath = this.app.getWhere(oNode);
			var oGet = this.ref(sPath);
			this.setChecks(sPath, JUL.typeOf(oGet));
			this.fillComment(this.state.lastChanged && this.state.lastChanged.path === sPath ? this.state.lastChanged.fields : this.current.comments[sPath] || []);
			if (this.state.lastChanged && this.state.lastChanged.path === sPath) { ample.getElementById('button-apply').setAttribute('class', 'apply'); }
			else { ample.getElementById('button-apply').removeAttribute('class'); }
			var sName = sPath.replace(/\\./g, ':::::').split('.').pop().replace(/:{5}/, '.');
			ample.getElementById('menulist-generate').setAttribute('value', this.app.getCommentType(oGet, sName));
			this.setPreview(sPath, this.state.lastChanged && this.state.lastChanged.path === sPath, oGet);
			this.selectTab(sPath);
		}
		else {
			this.setChecks();
			ample.getElementById('button-apply').removeAttribute('class');
			ample.getElementById('description-preview').setAttribute('value', 'Preview');
			ample.getElementById('textbox-preview').setAttribute('value', '');
		}
	},
	/**
		Fires when code tab selection changes
		@param	{Object}	oTab	Selected tab element
	*/
	onSelectTab: function(oTab) {
		if (!oTab) { return; }
		var sPath = this.app.getWhere(oTab);
		ample.getElementById('button-file-remove').setAttribute('disabled', sPath === this.current.path);
		this.fillCode(sPath);
	},
	/**
		Fires when the user checks the 'separate file' checkbox
		@param	{Boolean}	bCheck	Check state
	*/
	onSeparateFile: function(bCheck) {
		if (!this.currentNode) { return; }
		var sPath = this.app.getWhere(this.currentNode);
		if (bCheck) {
			this.current.files[sPath] = {
				putOutside: [],
				useJul: this.current.useJul,
				jslint: this.current.jslint,
				template: this.app.config.fileFields.template.init
			};
			this.buildTree(sPath + '.@fileOverview', 1);
		}
		else {
			var aPut = this.current.files[sPath].putOutside || [];
			delete this.current.files[sPath];
			if (aPut.length) {
				this.removeTree(this.currentNode, true);
				var sMember = sPath.substr(this.current.path.length + 1);
				JUL.ns('jsonObject' + (sMember ? '.' + sMember : ''),
					this.parse(this.ref(sPath), sPath, this.buildTree), this.state);
			}
			else {
				this.removeTree(this.currentNode.children.firstChild);
			}
			sPath = this.getFile(sPath);
			ample.getElementById('textbox-put-outside').setAttribute('value', '');
		}
		ample.getElementById('textbox-put-outside').setAttribute('disabled', !bCheck);
		this.emptyTabs();
		this.fillTabs();
		this.fillCode(sPath, true);
		this.selectTab(sPath);
		this.notSaved();
	},
	/**
		Fires when the user checks the 'sort keys' checkbox
		@param	{Boolean}	bCheck	Check state
	*/
	onSortKeys: function(bCheck) {
		if (!this.currentNode) { return; }
		var sPath = this.app.getWhere(this.currentNode);
		var ix = this.current.sortKeys.indexOf(sPath);
		if (bCheck) {
			if (ix < 0) { this.current.sortKeys.push(sPath); }
		}
		else {
			if (ix > -1) { this.current.sortKeys.splice(ix, 1); }
		}
		if (!this.currentNode.children || this.currentNode.children.items.length < 2) { return; }
		this.removeTree(this.currentNode, true);
		var sMember = sPath.substr(this.current.path.length + 1);
		JUL.ns('jsonObject' + (sMember ? '.' + sMember : ''),
			this.parse(this.ref(sPath), sPath, this.buildTree), this.state);
		sPath = this.getFile(sPath);
		this.fillCode(sPath, true);
		this.selectTab(sPath);
		this.notSaved();
	},
	/**
		Undoes the last items commenting operation
	*/
	onUndoTree: function() {
		if (!this.current.ns) { return; }
		var oUndo = this.state.undoTree;
		if (!oUndo) {
			window.alert('Nothing to undo');
			return;
		}
		for (var sItem in oUndo.nodes) {
			if (oUndo.nodes.hasOwnProperty(sItem)) {
				if (oUndo.nodes[sItem]) {
					this.current.comments[sItem] = oUndo.nodes[sItem];
				}
				else {
					delete this.current.comments[sItem];
				}
			}
		}
		delete this.state.lastChanged;
		var sPath = this.app.getWhere(oUndo.select);
		sPath = this.getFile(sPath);
		this.fillCode(sPath, true);
		this.selectTab(sPath);
		this.notSaved();
		var oTree = ample.getElementById('tree-dom');
		if (oUndo.select === this.currentNode) { this.onSelectNode(this.currentNode); }
		else { oTree.selectItem(oUndo.select); }
		oUndo.select.scrollIntoView();
	},
	/**
		Opens a project from the 'Browse' dialog
	*/
	open: function() {
		var oList  = ample.getElementById('listbox-browse');
		if (!oList.selectedItems.length) {
			window.alert('Please select an item');
			return;
		}
		var sItem = this.app.getWhere(oList.currentItem);
		ample.get('index.php/main/manage', {
			type: 'project',
			operation: 'open',
			ns: sItem,
			ts: (new Date()).getTime()
		}, function(sResponse) {
			var oResult = JSON.parse(sResponse);
			if (oResult.error) {
				window.alert(oResult.error);
				return;
			}
			ample.getElementById('dialog-browse').hide();
			var oProject = JUL.Comments.project;
			oProject.current = oResult.result;
			oProject.state.afterOpen = true;
			oProject.switchCurrent();
		});
	},
	/**
		Parses an object from the DOM tree
		@param	{Object}	oData	Object to parse
		@param	{String}	sPath	Object path
		@param	{Function}	[fAction]	Optional callback when parsing members
		@param	{Object}	[oContext]	Callback scope
		@param	{Array}	[aExclude]	List of member paths to exclude from parsing
		@param	{Number}	[nLevel]	Internal use, keeps the depth level
		@returns	{Mixed}	Parsed object
	*/
	parse: function(oData, sPath, fAction, oContext, aExclude, nLevel) {
		var aPaths = [].concat(this.current.excludePaths, aExclude || []);
		for (var k = 0; k < aPaths.length; k++) {
			if (this.inside(sPath, aPaths[k])) { return this._undef; }
		}
		if (!nLevel) { nLevel = 1; }
		if (typeof fAction === 'function') {
			fAction.call(oContext || this, sPath, nLevel, oData);
			if (this.current.files[sPath]) {
				fAction.call(oContext || this, sPath + '.@fileOverview' , nLevel);
			}
		}
		if (nLevel < 2) {
			this._refObjects = [];
			var oThis = this;
			if (this._keepTimer) { clearTimeout(this._keepTimer); }
			this._keepTimer = setTimeout(function() { delete oThis._keepTimer; oThis._refObjects = []; }, 30000);
		}
		if (oData && typeof oData === 'object' ) {
			if (typeof oData.toJSON === 'function') { return this.coder._jsonReplacer('', oData.toJSON()); }
			if (this._refObjects.indexOf(oData) > -1) { return null; }
			this._refObjects.push(oData);
		}
		var i;
		switch (JUL.typeOf(oData)) {
		case 'Array':
			var aReturn = [];
			for (i = 0; i < oData.length; i++) {
				aReturn[i] = null;
				try {
				aReturn[i] = this.parse(oData[i], sPath + '.' + i, fAction, oContext, aExclude, nLevel + 1);
				}
				catch (e1) {}
			}
		return aReturn;
		case 'Object':
			var oReturn = {};
			var aPut = this.current.files[sPath] ? this.current.files[sPath].putOutside || [] : [];
			var aKeys = [];
			var oSort = {properties: [], methods: [], _properties: [], _methods: []};
			for (var sItem in oData) {
				if (oData.hasOwnProperty(sItem) && aPut.indexOf(sItem) < 0) {
					if (this.current.sortKeys.indexOf(sPath) > -1) {
						try {
						if (typeof oData[sItem] === 'function' || (typeof oData[sItem] === 'string' &&
							oData[sItem].substr(0, this.coder._jsonPrefixes.func.length) === this.coder._jsonPrefixes.func)) {
							oSort[sItem.substr(0, 1) === '_' ? '_methods' : 'methods'].push(sItem);
						}
						else {
							oSort[sItem.substr(0, 1) === '_' ? '_properties' : 'properties'].push(sItem);
						}
						}
						catch (e0) {}
					}
					else {
						aKeys.push(sItem);
					}
				}
			} 
			aKeys = [].concat(aKeys, oSort.properties.sort(), oSort.methods.sort(), oSort._properties.sort(), oSort._methods.sort(), aPut);
			for (i = 0; i < aKeys.length; i++) {
				sItem = aKeys[i];
				if (oData.hasOwnProperty(sItem)) {
					 try {
					 oReturn[sItem] = this.parse(oData[sItem], sPath + '.' + sItem.replace(/\./g, '\\.'), fAction, oContext, aExclude, nLevel + 1);
					 }
					 catch (e2) {}
				}
			}
		return oReturn;
		case 'Boolean':
		case 'Date':
		case 'Function':
		case 'Null':
		case 'Number':
		case 'RegExp':
		case 'String':
		case 'Undefined':
		if (typeof oData === 'function' && this.current.expandProto.indexOf(sPath) > -1) {
			return {
				_code: this.coder._jsonReplacer('', oData),
				toJSON: function() { return this._code; },
				prototype: this.parse(oData.prototype, sPath + '.prototype', fAction, oContext, aExclude, nLevel + 1)
			};
		}
		return this.coder._jsonReplacer('', oData);
		default:
		return null;
		}
	},
	pasteField: function() {
		if (!this.currentNode) { return; }
		var aFields = this.state.clipboard.fields || [];
		if (aFields.length) {
			this.fillComment(aFields);
			this.onFieldChange();
		}
	},
	/**
		Returns a reference to the source object of the project's DOM
		@param	{String}	sPath	Namespace path
		@returns	{Mixed}	Source object
	*/
	ref: function(sPath) {
		var oWindow = document.getElementById('iframe-site').contentWindow;
		return JUL.get(sPath, oWindow);
	},
	/**
		Removes selected items from the comment fields list box
	*/
	removeField: function() {
		if (!this.currentNode) { return; }
		var oList = ample.getElementById('listbox-comment');
		if (!oList.selectedItems.length) {
			window.alert('Please select some items');
			return;
		}
		while (oList.selectedItems.length) {
			var oLast = oList.selectedItems.item(oList.selectedItems.length - 1);
			var sId = oLast.getAttribute('id');
			oList.body.removeChild(oLast);
			delete this.app.state.map[sId];
		}
		this.onFieldChange();
	},
	/**
		Rempves a (sub)tree from the DOM tree pane
		@param	{Object}	[oNode]	Top of subtree, defaults to the tree root
		@param	{Boolean}	[bOnlyChildren]	Only remove the node descendants
	*/
	removeTree: function(oNode, bOnlyChildren, bSelf) {
		if (!oNode) { oNode = ample.getElementById('tree-dom').body; }
		var oChildren = oNode.children;
		if (oChildren) {
			while (oChildren.lastChild) { this.removeTree(oChildren.lastChild, false, true); }
		}
		var oParent = oNode.parentNode;
		if (!bOnlyChildren && oNode.nodeName === 'xul:treeitem') {
			var sId = oNode.getAttribute('id');
			var sPath = this.app.getWhere(sId);
			oParent.removeChild(oNode);
			delete this.app.state.map[sId];
			delete this.state.revMap['node-' + sPath];
		}
		if (!bSelf) {
			if (bOnlyChildren && oChildren && oNode.nodeName === 'xul:treeitem') {
				oNode.removeChild(oChildren);
			oNode.setAttribute('container', false);
				oNode.parentNode.reflow();
			}
			if (!bOnlyChildren && oParent.nodeName === 'xul:treechildren' && !oParent.items.length) {
				oParent = oParent.parentNode;
				oParent.removeChild(oParent.children);
				if (oParent.nodeName === 'xul:treeitem') {
					oParent.setAttribute('container', false);
				oParent.parentNode.reflow();
				}
			}
		}
	},
	/**
		Resets the comment fileds list box to the stored comment
	*/
	resetComment: function() {
		if (!this.currentNode) { return; }
		delete this.state.lastChanged;
		var sPath = this.app.getWhere(this.currentNode);
		this.emptyList();
		this.fillComment(this.current.comments[sPath] || []);
		ample.getElementById('button-apply').removeAttribute('class');
		this.setPreview(sPath);
	},
	/**
		Saves the current project
		@param	{String}	sType	Save type: new, edit, savecode
	*/
	save: function(sType) {
		var oNew = {
			ns: '',
			title: '',
			version: '',
			site: '',
			path: '',
			levels: 4,
			showPaths: [],
			copyright: '',
			jslint: '',
			excludePaths: [],
			useJul: false,
			sortKeys: [],
			expandProto: [],
			files: {},
			comments: {}
		};
		var sItem;
		if (sType !== 'new' && sType !== 'saveCode') {
			JUL.apply(oNew, this.current);
			oNew.sortKeys = [].concat(this.current.sortKeys);
			oNew.expandProto = [].concat(this.current.expandProto);
			oNew.files = JUL.apply({}, this.current.files);
			oNew.comments = JUL.apply({}, this.current.comments);
		}
		if (sType === 'new' || sType === 'edit') {
			var oFields = this.app.config.projectFields;
			var oControls = this.app.state.controls.projectFields;
			for (sItem in oControls) {
				if (oControls.hasOwnProperty(sItem)) {
					var oControl = ample.getElementById(oControls[sItem]);
					switch (oFields[sItem].type) {
					case 'bool': oNew[sItem] = oControl.getAttribute('checked') === 'true'; break;
					case 'number': oNew[sItem] = parseInt(oControl.getAttribute('value')) || 0; break;
					case 'edit': oNew[sItem] = oControl.getAttribute('value'); break;
					default: oNew[sItem] = JUL.trim(oControl.getAttribute('value'));
					}
				}
			}
			oNew.showPaths = oNew.showPaths ? oNew.showPaths.split(',').map(JUL.trim) : [];
			oNew.excludePaths = oNew.excludePaths ? oNew.excludePaths.split(',').map(JUL.trim) : [];
		}
		if (sType !== 'new' && sType !== 'saveCode') {
			var aExclude = [].concat(oNew.excludePaths);
			var nDiscard = 0;
			var aKeys = [];
			var k;
			for (sItem in oNew.comments) {
				if (oNew.comments.hasOwnProperty(sItem)) {
					if (!this.inside(sItem, oNew.path)) { nDiscard++; }
					else {
						for (k = 0; k < aExclude.length; k++) {
							if (this.inside(sItem, aExclude[k])) { nDiscard++; break; }
						}
						if (k >= aExclude.length) { aKeys.push(sItem); }
					}
				}
			}
			var nDiscardFile = 0;
			var aKeysFile = [];
			for (sItem in oNew.files) {
				if (oNew.files.hasOwnProperty(sItem)) {
					if (!this.inside(sItem, oNew.path)) { nDiscardFile++; }
					else {
						for (k = 0; k < aExclude.length; k++) {
							if (this.inside(sItem, aExclude[k])) { nDiscardFile++; break; }
						}
						if (k >= aExclude.length) { aKeysFile.push(sItem); }
					}
				}
			}
			if ((nDiscard || nDiscardFile) &&
				!window.confirm('Files and comments outside ' + oNew.path + ' namespace or inside the excluded paths will be discarded. Continue?')) { return; }
			var oOld = oNew.comments;
			oNew.comments = {};
			for (var i = 0; i < aKeys.sort().length; i++) { oNew.comments[aKeys[i]] = oOld[aKeys[i]]; }
			oOld = oNew.files;
			oNew.files = {};
			for (i = 0; i < aKeysFile.sort().length; i++) { oNew.files[aKeysFile[i]] = oOld[aKeysFile[i]]; }
			for (i = 0; i < oNew.sortKeys.length; i++) {
				if (!this.inside(oNew.sortKeys[i], oNew.path)) { oNew.sortKeys.splice(i, 1); i--; }
				else {
					for (k = 0; k < aExclude.length; k++) {
						if (this.inside(oNew.sortKeys[i], aExclude[k])) { oNew.sortKeys.splice(i, 1); i--; break; }
					}
				}
			}
			oNew.sortKeys.sort();
			for (i = 0; i < oNew.expandProto.length; i++) {
				if (!this.inside(oNew.expandProto[i], oNew.path)) { oNew.expandProto.splice(i, 1); i--; }
				else {
					for (k = 0; k < aExclude.length; k++) {
						if (this.inside(oNew.expandProto[i], aExclude[k])) { oNew.expandProto.splice(i, 1); i--; break; }
					}
				}
			}
			oNew.expandProto.sort();
		}
		if (sType !== 'saveCode') { oNew.version = '0.' + (new Date()).getTime(); }
		var oData = {
			operation: sType,
			type: 'project',
			ns: oNew.ns || this.current.ns,
			old_ns: this.current.ns || '',
			json: this.parser.obj2str(oNew, true)
		};
		if (sType === 'saveCode') { delete oData.json; }
		if (this.state.jsonObject && (sType === 'save' || sType === 'saveCode')) {
			for (sItem in this.current.files) {
				if (this.current.files.hasOwnProperty(sItem)) {
					oData['code[' + sItem + ']'] = this.getCode(sItem);
				}
			}
		}
		this.state.operation = sType;
		this.state.newProject = oNew;
		ample.ajax({
			url: 'index.php/main/manage',
			type: 'POST',
			async: sType !== 'save',
			dataType: 'text',
			data: oData,
			success: function(sResponse) {
				sResponse = JSON.parse(sResponse);
				if (sResponse.error) {
					window.alert(sResponse.error);
					return;
				}
				var oProject = JUL.Comments.project;
				if (oProject.state.operation !== 'saveCode') {
					oProject.current = oProject.state.newProject;
					delete oProject.state.newProject;
				}
				if (oProject.state.operation === 'new' || oProject.state.operation === 'edit') {
					ample.getElementById('dialog-open').hide();
					oProject.state.afterOpen = true;
					oProject.switchCurrent();
				}
				if (oProject.state.operation === 'save' || oProject.state.operation === 'saveCode') {
					oProject.notSaved(true);
				}
			}
		});
	},
	/**
		Applies the edited file properties
	*/
	saveFile: function() {
		var oFields = this.app.config.fileFields;
		var oControls = this.app.state.controls.fileFields;
		var sPath = this.app.getWhere(ample.getElementById('tabs-code').parentNode.selectedTab);
		var oFile = this.current.files[sPath];
		for (var sItem in oControls) {
			if (oControls.hasOwnProperty(sItem)) {
				var oControl = ample.getElementById(oControls[sItem]);
				switch (oFields[sItem].type) {
				case 'bool': oFile[sItem] = oControl.getAttribute('checked') === 'true'; break;
				case 'number': oFile[sItem] = parseInt(oControl.getAttribute('value')) || 0; break;
				case 'edit': oFile[sItem] = oControl.getAttribute('value'); break;
				default: oFile[sItem] = JUL.trim(oControl.getAttribute('value'));
				}
			}
		}
		ample.getElementById('dialog-open').hide();
		this.fillCode(sPath, true);
		this.selectTab(sPath);
		this.notSaved();
	},
	/**
		Selects a code tab by its path
		@param	{String}	sPath	Namespace path
	*/
	selectTab: function(sPath) {
		sPath = this.getFile(sPath);
		var sId = this.getId(sPath, 'tab-');
		ample.getElementById(sId).$activate();
	},
	/**
		Sets the state of the checkboxes under the tree pane
		@param	{String}	sPath	Selected path
		@param	{String}	sType	Selected object class
	*/
	setChecks: function(sPath, sType) {
		sPath = sPath || '';
		ample.getElementById('checkbox-separate-file').setAttribute('checked', !!sPath && !!this.current.files[sPath]);
		ample.getElementById('checkbox-sort-keys').setAttribute('checked', !!sPath && this.current.sortKeys.indexOf(sPath) > -1);
		ample.getElementById('checkbox-expand-proto').setAttribute('checked', !!sPath && this.current.expandProto.indexOf(sPath) > -1);
		ample.getElementById('textbox-put-outside').setAttribute('value', sPath && this.current.files[sPath] ?
			(this.current.files[sPath].putOutside || []).join(', ') : '');
		ample.getElementById('checkbox-separate-file').setAttribute('disabled',
			sPath === this.current.path || sPath.substr(-10) === '.prototype' || (sType !== 'Object' && sType !== 'Function'));
		ample.getElementById('checkbox-sort-keys').setAttribute('disabled', sType !== 'Object');
		ample.getElementById('checkbox-expand-proto').setAttribute('disabled', sType !== 'Function');
		ample.getElementById('textbox-put-outside').setAttribute('disabled', !sPath || !this.current.files[sPath]);
	},
	/**
		Sets the caption and the content of the preview pane
		@param	{String}	sPath	Selected path
		@param	{Boolean}	bNew	True if the comment isn't applied
		@param	{Object}	oGet	Reference to the selected object
	*/
	setPreview: function(sPath, bNew, oGet) {
		if (sPath === false) { sPath = this.app.getWhere(this.currentNode); }
		if (typeof oGet === 'undefined') { oGet = this.ref(sPath || ''); }
		var sType = sPath.substr(-14) === '.@fileOverview' ? 'fileOverview' : JUL.typeOf(oGet);
		ample.getElementById('description-preview').setAttribute('value', sPath + ' (' + sType + ')' + (bNew ? ' *' : ''));
		if (bNew) {
			ample.getElementById('description-preview').setAttribute('tooltiptext', 'Çomment not saved. Press \'Apply\' to save it.');
		}
		else {
			ample.getElementById('description-preview').removeAttribute('tooltiptext');
		}
		ample.getElementById('textbox-preview').setAttribute('value', this.getView(sPath));
	},
	/**
		Occurs after switching or closing the current project
	*/
	switchCurrent: function() {
			window.document.title = (this.current.ns ? this.current.title + ' - ' : '') + this.app.title;
			ample.getElementById('tbutton-save-project').setAttribute('disabled', !!this.current.ns);
			ample.getElementById('tbutton-download-code').setAttribute('disabled', !!this.current.ns);
		ample.getElementById('button-file-remove').setAttribute('disabled', false);
		ample.getElementById('textbox-address').setAttribute('value', this.current.site ? this.current.site : '');
		ample.getElementById('textbox-object').setAttribute('value', this.current.path ? this.current.path : '');
		this.removeTree();
		this.emptyTabs();
		ample.getElementById('menulist-field').setAttribute('value', '');
		ample.getElementById('menulist-generate').setAttribute('value', '');
		ample.getElementById('textbox-code').setAttribute('value', '');
		ample.getElementById('statuspanel-project').setAttribute('label', this.current.ns ? this.current.title : '');
		this.state.jsonObject = null;
		this.state.notSaved = false;
		this.state.lastFile = '';
		delete this.state.undoTree;
		if (this.current.site === ample.getElementById('iframe-site').getAttribute('src')) {
			window.document.getElementById('iframe-site').contentWindow.location = this.current.site;
		}
		else {
			if (this.current.site) { ample.getElementById('iframe-site').setAttribute('src', this.current.site); }
			else { ample.getElementById('iframe-site').removeAttribute('src'); }
		}
	}
});

})();

/* end JUL.Comments.project.js */
